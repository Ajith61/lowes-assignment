package com.lowes.orderservice.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.lowes.orderservice.client.InventoryClient;
import com.lowes.orderservice.model.OrderDao;
import com.lowes.orderservice.model.OrderDto;
import com.lowes.orderservice.repository.OrderRepository;
import com.lowes.orderservice.service.OrderService;
import com.lowes.orderservice.util.model.ResponseModel;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.circuitbreaker.resilience4j.Resilience4JCircuitBreaker;
import org.springframework.cloud.circuitbreaker.resilience4j.Resilience4JCircuitBreakerFactory;
import org.springframework.cloud.stream.function.StreamBridge;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping("/v1.0.0/order")
@CrossOrigin(origins = "*")
public class OrderController {
    
	@Autowired
	private OrderService orderService;
 

	@PostMapping
	public String placeOrder(@RequestBody OrderDto orderDto) {
		 Resilience4JCircuitBreaker circuitBreaker = circuitBreakerFactory.create("inventory");
		 
		  java.util.function.Supplier<Boolean> booleanSupplier = () -> inventoryClient.checkStock();
	        boolean productsInStock = circuitBreaker.run(booleanSupplier, throwable -> handleErrorCase());
	//	boolean productsInStock = inventoryClient.checkStock();

		if (productsInStock) {
			OrderDao order = new OrderDao();
			// order.setOrderLineItems(orderDto.getOrderLineItemsList()); //
			// order.setOrderNumber(UUID.randomUUID().toString());

			// orderRepository.save(order); //
			// log.info("Sending Order Details with Order Id {} to Notification Service",
			// order.getId()); //streamBridge.send("notificationEventSupplier-out-0",
			// MessageBuilder.withPayload(order.getId()).build());
			return "Order Place Successfully";
		} else {
			return "Order Failed - One of the Product in your Order is out of stock";
		}
	}



	 @GetMapping
	    @ResponseStatus(HttpStatus.OK)
	    public String findAll() {
		/*
		 * int a=0; boolean productsInStock = inventoryClient.checkStock(); boolean ab =
		 * productsInStock; return "success";
		 */
	        
	        Resilience4JCircuitBreaker circuitBreaker = circuitBreakerFactory.create("inventory");
			 
			  java.util.function.Supplier<Boolean> booleanSupplier = () -> inventoryClient.checkStock();
		       boolean productsInStock = circuitBreaker.run(booleanSupplier, throwable -> handleErrorCase());
			//boolean productsInStock = inventoryClient.checkStock();

			if (productsInStock) {
				OrderDao order = new OrderDao();
				order.setId((long) 1);
				streamBridge.send("notificationEventSupplier-out-0", MessageBuilder.withPayload(order.getId()).build());
				// order.setOrderLineItems(orderDto.getOrderLineItemsList()); //
				// order.setOrderNumber(UUID.randomUUID().toString());

				// orderRepository.save(order); //
				// log.info("Sending Order Details with Order Id {} to Notification Service",
				// order.getId()); //streamBridge.send("notificationEventSupplier-out-0",
				// MessageBuilder.withPayload(order.getId()).build());
				return "Order Place Successfully";
			} else {
				return "Order Failed - One of the Product in your Order is out of stock";
			}
	    }
	 
	  @PostMapping("/create")
	    public ResponseModel<OrderDto> createProduct(@Valid @RequestBody OrderDto orderDto) {
	        ResponseModel<OrderDto> productDto = orderService.createProduct(orderDto);
	        logger.info(productDto.toString());
	        return productDto;
	    }
}
