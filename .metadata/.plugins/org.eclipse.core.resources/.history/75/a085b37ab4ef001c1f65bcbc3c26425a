package com.lowes.orderservice.service;

import javax.validation.Valid;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.circuitbreaker.resilience4j.Resilience4JCircuitBreaker;
import org.springframework.cloud.circuitbreaker.resilience4j.Resilience4JCircuitBreakerFactory;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.stereotype.Service;

import com.lowes.orderservice.client.InventoryClient;
import com.lowes.orderservice.model.OrderDao;
import com.lowes.orderservice.model.OrderDto;
import com.lowes.orderservice.repository.OrderRepository;
import com.lowes.orderservice.util.model.ResponseModel;
import com.lowes.productservice.model.dao.ProductDao;

@Service
public class OrderService {
	
	 @Autowired
		private  OrderRepository orderRepository;
	   @Autowired
		private  InventoryClient inventoryClient;
	    @Autowired
	    private  Resilience4JCircuitBreakerFactory circuitBreakerFactory;
	    @Autowired
	    private  StreamBridge streamBridge;

	public ResponseModel<OrderDto> createProduct(@Valid OrderDto orderDto) {
		
	        
	        Resilience4JCircuitBreaker circuitBreaker = circuitBreakerFactory.create("inventory");
			 
			  java.util.function.Supplier<Boolean> booleanSupplier = () -> inventoryClient.checkStock();
		       boolean productsInStock = circuitBreaker.run(booleanSupplier, throwable -> handleErrorCase());
			if (productsInStock) {
				OrderDao orderDao =  new OrderDao();
				BeanUtils.copyProperties(orderDto, orderDao);
				if(orderDao!=null) {
				ProductDao resultProductDao = orderRepository.save(entity)
				streamBridge.send("notificationEventSupplier-out-0", MessageBuilder.withPayload(order.getId()).build());
				// order.setOrderLineItems(orderDto.getOrderLineItemsList()); //
				// order.setOrderNumber(UUID.randomUUID().toString());

				// orderRepository.save(order); //
				// log.info("Sending Order Details with Order Id {} to Notification Service",
				// order.getId()); //streamBridge.send("notificationEventSupplier-out-0",
				// MessageBuilder.withPayload(order.getId()).build());
				return "Order Place Successfully";
			} else {
				return "Order Failed - One of the Product in your Order is out of stock";
			}
			}
	}
	
	private Boolean handleErrorCase() {
		return false;
	}

}
